#!/usr/bin/env -S python3 -u
import hashlib
import argparse, socket, time, json, select, struct, sys, math
from typing import Any, Dict

DATA_SIZE = 1375
MIN_WINDOW = 2
STARTING_WINDOW = MIN_WINDOW # packets
# GROWTH_RATE = 1 #packet for every packet received
ROUND_TRIP_TIME = 0.5 
TIMEOUT_LEARNING_RATE = 0.2

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.current_sequence_number = 0
        self.outstanding_packets = {} #packet sequence number -> time, for delinquency detection
        self.sent_packets = {} #packet sequence number -> packet, for retransmission

        self.round_trip_time = ROUND_TRIP_TIME
        self.window_size = STARTING_WINDOW

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message: Dict[str, Any]):
        """
        Given *NEW* data message, send it to the receiver and update the current sequence number.
        """
        message["checksum"] = self.compute_checksum(json.dumps(message))
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

        self.sent_packets[self.current_sequence_number] = message
        self.outstanding_packets[self.current_sequence_number] = time.time()
        self.current_sequence_number += 1

    def run(self):
        """
        The main loop of the sender.
        """
        while True:

            #if we are in delinquency mode, work out of the backlog first, and then read from stdin.
            delinquent_packets = sorted(self.get_delinquent_packets(), key=lambda x: int(x["seq"]))
            if len(delinquent_packets) != 0:
                if not self.is_window_full():
                    #side channel send packets
                    self.log(f"Resending packet {delinquent_packets[0]['seq']} message {delinquent_packets[0]}")
                    self.socket.sendto(json.dumps(delinquent_packets[0]).encode('utf-8'), (self.host, self.remote_port))
                    self.sent_packets[int(delinquent_packets[0]['seq'])] = delinquent_packets[0]
                    self.outstanding_packets[int(delinquent_packets[0]['seq'])] = time.time()
                    self.window_size/=2

            sockets = [self.socket, sys.stdin] if not (self.is_window_full() or len(self.get_delinquent_packets()) > 0) else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    self.receive_packet(conn)
                elif conn == sys.stdin:
                    self.read_and_send_msg()

    def receive_packet(self, conn):
        """
        Listen on the socket and get any input packets. If there is a packet, then handle it. If the packet is malformed, then throw it out do nothing.
        """
        k, addr = conn.recvfrom(65535)
        msg = k.decode('utf-8')
        self.log(msg)

        loaded_msg = ""
        try:
            loaded_msg = json.loads(msg)
        except:
            self.log("Received corrupted packet")

        if loaded_msg == "" or not self.validate_checksum(loaded_msg):
            self.log("Received corrupted packet")
            return

        self.handle_packet(loaded_msg)

    def read_and_send_msg(self):
        """
        Read a message from stdin and send it to the receiver. If there is nothing left to read, then exit the program.
        """
        data = sys.stdin.read(DATA_SIZE)
        
        if len(data) == 0 and self.no_outstanding_packets():
            self.log("All done!")
            sys.exit(0) 
        elif len(data) == 0:
            self.log(f"Sent all data, waiting for incoming packets{self.outstanding_packets}")
            time.sleep(0.001)
        else:
            self.send_msg(data)

    def handle_packet(self, packet):
        """
        Dispatch a packet to the proper handler.
        """
        if packet["type"] == "ack":
            self.handle_ack(packet)
        else:
            raise Exception("Unknown packet type")

    def send_msg(self, data):
        """
        Send a data packet to the receiver
        """
        self.log("Sending message '%s'" % data)
        self.send({ "type": "msg", "seq": self.current_sequence_number, "data": data })

    def handle_ack(self, packet):
        """
        Handle an ack packet. There are three main tasks, first update the RTT estimate, update stats to be used for window size computation, and then 
        finally remove the packets from our outstanding packets list.
        """
        self.log("Received ACK packet '%s'" % packet)

        if int(packet["seq"]) in self.outstanding_packets:
            rtt = time.time() - self.outstanding_packets[int(packet["seq"])]
            self.round_trip_time = (1 - TIMEOUT_LEARNING_RATE) * self.round_trip_time + TIMEOUT_LEARNING_RATE * rtt

            del self.outstanding_packets[int(packet["seq"])]
            del self.sent_packets[int(packet["seq"])]

            self.window_size += 1
        else:
            self.log(f"Received duplicate ACK, sequence number {int(packet['seq'])}")

    def is_window_full(self):
        """
        returns true if there are as many outstanding, not delinquent packets as there are window slots. Otherwise return false.
        """
        return len(list(filter(lambda timestamp: (time.time() - timestamp) < self.timeout, self.outstanding_packets.values()))) >= self.window_size

    def no_outstanding_packets(self):
        """
        Returns true if there are no outstanding(packets sent but not acked) packets.
        """
        return len(self.outstanding_packets) == 0

    def compute_checksum(self, packet: str):
        """
        Given a packet, compute the sha1 checksum and return it.
        """
        packet_bytes = packet.encode('utf-8')
        return hashlib.sha1(packet_bytes).hexdigest()

    def validate_checksum(self, message: Dict[str, Any]) -> bool:
        """
        Given a packet, validate that the checksum is the correct sha1 hash of the packet minus the checksum entry.
        """
        if "checksum" not in message.keys():
            return False

        message_copy = message.copy()
        del message_copy["checksum"]

        computed_hashsum = hashlib.sha1(json.dumps(message_copy).encode('utf-8')).hexdigest()
        return computed_hashsum == message["checksum"]

    def get_delinquent_packets(self):
        """
        Gets all of the packets that have been sent but not acknowledged within the timeout period
        """
        
        def _delinquent_generator():
            for seq, time_sent in self.outstanding_packets.items():
                if time.time() - time_sent > self.timeout:
                    yield self.sent_packets[seq]

        return list(_delinquent_generator())

    @property
    def timeout(self):
        """
        Returns the timeout for the current round trip time
        """
        return 2*self.round_trip_time

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
